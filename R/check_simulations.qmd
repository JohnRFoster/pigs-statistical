---
title: "check_simulations"
format: html
editor: visual
execute: 
  echo: false
  warning: false
  message: false
article: 
  column: page
---

# simulation set-up

```{r setup}
library(targets)
library(tidyverse)
library(lubridate)
library(config)
library(spdep)
library(readxl)
library(spatialreg)
library(parallel)
library(nimble)
library(rgdal)
library(coda)
library(mgcv)
source("../R/functions_nimble.R")
file_dir <- "../out/simulation"
df <- read_csv(file.path(file_dir, "summaryRecovered_litterSize.csv"))

n_experiments <- length(unique(df$simulation))

```


Total number of simulations run: `r n_experiments`


## Litter size

The reproduction part of the process model has been reparameterized to assume that females have one litter per year. This way we only have to estimate one parameter, which is the number of piglets per litter. The prior for litter size is 

$$ls \sim exp(N(0, 2))$$


```{r Reproduction parameters}
#| label: fig-reproSummary
#| fig-cap: "95% CI of the resdiuals for litter size across all simulations"



df <- read_csv(file.path(file_dir, "summaryResidual_litterSize.csv"))

df |> 
  mutate(Parameter = "Mean litter size") |> 
  ggplot() +
  aes(x = med, xmin = low, xmax = high, y = Parameter) +
  geom_linerange(linewidth = 2, position = position_dodge(1)) +
  geom_point(size = 4.5, position = position_dodge(1)) +
  geom_vline(aes(xintercept = 0), linetype = "dashed") +
  labs(x = "Residuals in mean litter size",
       y = "",
       title = "Mean litter size",
       color = element_blank()) +
  theme_bw()
```


```{r Reproduction parameters}
#| label: fig-reproRecovered
#| fig-cap: "95% CI posteriors for litter size across all simulations, color represents if the parameter was recovered in the simulation"
df <- read_csv(file.path(file_dir, "summaryRecovered_litterSize.csv"))

percent_recovered <- function(dat){
  sum(dat$parameter_recovered) / nrow(dat) * 100
}

ls_recovered <- percent_recovered(df)

actual <- df$actual[1]

df |> 
  mutate(pr = if_else(parameter_recovered == 1, "Recovered", "Missed")) |> 
  ggplot() +
  aes(x = simulation, y = med, ymin = low, ymax = high, color = pr) +
  geom_linerange() +
  geom_point() +
  geom_hline(aes(yintercept = actual), linetype = "dashed") +
  labs(color = "Parameter Recovered",
       x = "Simulation",
       y = "Posterior Estimate") +
  theme_bw() +
  theme(axis.text.x = element_blank())

```

Percent of simulations that recovered litter size: `r ls_recovered`

Across simulations litter size was accurately estimated.

## Survival

```{r survival}
#| label: fig-phiSummary
#| layout-ncol: 2
#| fig-cap: "Survival"
#| fig-subcap: 
#|   - "Global survival"
#|   - "Shrinkage"

df <- read_csv(file.path(file_dir, "summaryResidual_survial.csv")) |> 
  mutate(Parameter = if_else(node == "phi_mu", "Mean survival", "Shrinkage"))

df |> 
  filter(Parameter == "Mean survival") |> 
  ggplot() +
  aes(x = med, xmin = low, xmax = high, y = Parameter) +
  geom_linerange(linewidth = 2, position = position_dodge(1)) +
  geom_point(size = 4.5, position = position_dodge(1)) +
  geom_vline(aes(xintercept = 0), linetype = "dashed") +
  labs(x = "Residuals in survival model",
       y = "",
       title = "Survival model: mean",
       color = element_blank()) +
  theme_bw()

df  |> 
  filter(Parameter == "Shrinkage") |> 
  ggplot() +
  aes(x = med, xmin = low, xmax = high, y = Parameter) +
  geom_linerange(linewidth = 2, position = position_dodge(1)) +
  geom_point(size = 4.5, position = position_dodge(1)) +
  geom_vline(aes(xintercept = 0), linetype = "dashed") +
  labs(x = "Residuals in survival model",
       y = "",
       title = "Survival model: shrinkage",
       color = element_blank()) +
  theme_bw()
```

```{r}
#| label: fig-phiRecovered
#| layout-ncol: 2
#| fig-cap: "Survival by simulation"
#| fig-subcap: 
#|   - "Global survival"
#|   - "Shrinkage"

df <- read_csv(file.path(file_dir, "summaryRecovered_survial.csv")) |> 
  mutate(Parameter = if_else(node == "phi_mu", "Mean survival", "Shrinkage"),
         pr = if_else(parameter_recovered == 1, "Recovered", "Missed"))

phi_recovered <- df |> 
  group_by(Parameter) |> 
  summarise(percent_recovered = sum(parameter_recovered) / n_experiments * 100)

bad_phi <- df |> 
  filter(parameter_recovered == 0)

df |> 
  filter(node == "phi_mu") |> 
  ggplot() +
  aes(x = simulation, y = med, ymin = low, ymax = high, color = pr) +
  geom_linerange() +
  geom_point() +
  geom_hline(aes(yintercept = actual), linetype = "dashed") +
  labs(color = "Parameter Recovered",
       x = "Simulation",
       y = "Posterior Estimate",
       title = "Survival") +
  theme_bw() +
  theme(axis.text.x = element_blank())

df |> 
  filter(parameter_recovered == 0) |> 
  ggplot() +
  aes(x = simulation, y = med, ymin = low, ymax = high, color = "Posterior") +
  geom_linerange() +
  geom_point() +
  geom_point(aes(y = actual, color = "Actual")) +
  facet_wrap(~ Parameter, scales = "free") +
  labs(color = "Parameter Recovered",
       x = "Simulation",
       y = "Posterior Estimate",
       title = "Not recovered: survival") +
  theme_bw() +
  theme(axis.text.x = element_blank())

```

Percent of simulations recovering survival parameters:

```{r}
knitr::kable(phi_recovered)
```

Global survival and property/timestep survival are on the same scale to show that most individual survival estimates are within the global survival posterior range.

## Data model

The saturation constant $\gamma$ for traps and snares comes from the data model were we estimated the area searched:

$$
area=\frac{\rho_me}{\gamma_m+e}
$$

where $e$ is effort per trap and $\rho$ is the search area by a unit of removal of method $m$.

# Gamma


```{r}
#| label: fig-gamma

plot_p <- function(m){
  df |> 
  filter(method %in% m) |> 
  ggplot(aes(x = reorder(simulation, actual, mean), y = actual, color = "Actual")) +
  geom_point(aes(y = med, color = "Posterior")) +
  geom_linerange(aes(ymin = low, ymax = high, color = "Posterior")) +
  geom_point(size = 1) +
  facet_wrap(~ method, scales = "free") +
  labs(x = "Simulation",
       y = "Posterior",
       # title = "Fixed wing (all simulations): unique area with additional units",
       color = element_blank()) +
  theme_bw() +
  theme(axis.text.x = element_blank(),
        legend.position = "bottom")
}

method_lookup <- tibble(
  method = c("Firearms", "Fixed wing", "Helicopter", "Snare", "Traps"),
  idx = 1:5
)
df <- read_csv(file.path(file_dir, "summaryResidual_saturationConstant.csv")) |> 
  mutate(method = c("Snare", "Traps"))

df |> 
  ggplot() +
  aes(x = med, xmin = low, xmax = high, y = method) +
  geom_linerange(linewidth = 2, position = position_dodge(0.5)) +
  geom_point(size = 4.5, position = position_dodge(0.5)) +
  geom_vline(xintercept = 0, linetype = "dashed") +
  labs(x = "Residual error (posterior - truth)",
       y = "Method",
       title = "Saturation constant (gamma)",
       color = element_blank()) +
  # coord_flip() +
  theme_bw()

df <- read_csv(file.path(file_dir, "summaryRecovered_saturationConstant.csv"))

gamma_recovered <- df |> 
  group_by(method) |> 
  summarise(percent_recovered = sum(parameter_recovered) / n_experiments * 100)

bad_gamma <- df |> 
  filter(parameter_recovered == 0)

df |> 
  filter(parameter_recovered == 0) |> 
  ggplot() +
  aes(y = med, ymin = low, ymax = high, x = simulation, color = "Posterior") +
  geom_linerange() +
  geom_point() +
  geom_point(aes(y = actual, color = "Actual")) +
  facet_wrap(~ method, scales = "free") +
  labs(x = "Simulation",
       y = "Posterior",
       title = "Not recovered: saturation constant (gamma)",
       color = element_blank()) +
  theme_bw() +
  theme(axis.text.x = element_blank())

plot_p("SNARE") + coord_cartesian(ylim = c(0, 65))
plot_p("TRAPS") + coord_cartesian(ylim = c(0, 65))

```


Percent of simulations recovering saturation constant (gamma):

```{r}
knitr::kable(gamma_recovered)
```



The area searched for firearms, fixed wing aircraft, and helicopters is:

$$
area=\rho_me
$$

meaning the area searched scales linearly with effort per unit deployed.

```{r}
#| label: fig-rho

df <- read_csv(file.path(file_dir, "summaryResidual_searchArea.csv")) |> 
  left_join(method_lookup)

df |> 
  ggplot() +
  aes(x = med, xmin = low, xmax = high, y = method) +
  geom_linerange(linewidth = 2, position = position_dodge(0.5)) +
  geom_point(size = 4.5, position = position_dodge(0.5)) +
  geom_vline(xintercept = 0, linetype = "dashed") +
  labs(x = "Residual error (posterior - truth)",
       y = "Method",
       title = "Search area (rho)",
       color = element_blank()) +
  # coord_flip() +
  theme_bw()

df <- read_csv(file.path(file_dir, "summaryRecovered_searchArea.csv")) |> 
  select(-method) |> 
  left_join(method_lookup)

rho_recovered <- df |> 
  group_by(method) |> 
  summarise(percent_recovered = sum(parameter_recovered) / n_experiments * 100)

bad_rho <- df |> 
  filter(parameter_recovered == 0)

df |> 
  filter(parameter_recovered == 0) |> 
  ggplot() +
  aes(y = med, ymin = low, ymax = high, x = simulation, color = "Posterior") +
  geom_linerange() +
  geom_point() +
  geom_point(aes(y = actual, color = "Actual")) +
  facet_wrap(~ method, scales = "free") +
  labs(x = "Simulation",
       y = "Posterior",
       title = "Not recovered: search area (rho)",
       color = element_blank()) +
  theme_bw() +
  theme(axis.text.x = element_blank())

plot_p("Firearms")
plot_p("Fixed wing")
plot_p("Helicopter")
plot_p("Snare")
plot_p("Traps")

```


Percent of simulations recovering search area (rho):

```{r}
knitr::kable(rho_recovered)
```




When more than one unit of a removal method is deployed, we need to estimated the degree of overlap of search area that could occur:

$$A = area(1 +(n-1)\zeta_m))$$

Where $n$ is the number of units deployed and $\zeta$ is the degree of overlap. When $\zeta$ = 0, no unique area searched by additional units. When $zeta$ = 1, all area searched by additional units is unique.

```{r overlap}
#| label: fig-p

df <- read_csv(file.path(file_dir, "summaryResidual_uniqueArea.csv")) |> 
  left_join(method_lookup)

df |> 
  ggplot() +
  aes(x = med, xmin = low, xmax = high, y = method) +
  geom_linerange(linewidth = 2, position = position_dodge(0.5)) +
  geom_point(size = 4.5, position = position_dodge(0.5)) +
  geom_vline(xintercept = 0, linetype = "dashed") +
  labs(x = "Residual error (posterior - truth)",
       y = "Method",
       title = "Unique area with additional units",
       color = element_blank()) +
  # coord_flip() +
  theme_bw()

df <- read_csv(file.path(file_dir, "summaryRecovered_uniqueArea.csv")) |> 
  select(-method) |> 
  left_join(method_lookup)

p_recovered <- df |> 
  group_by(method) |> 
  summarise(percent_recovered = sum(parameter_recovered) / n_experiments * 100)

bad_p <- df |> 
  filter(parameter_recovered == 0)

df |> 
  filter(parameter_recovered == 0) |> 
  arrange(actual) |> 
  ggplot(aes(x = simulation)) +
  geom_point(aes(y = actual, color = "Actual")) +
  geom_point(aes(y = med, color = "Posterior")) +
  geom_linerange(aes(ymin = low, ymax = high, color = "Posterior")) +
  facet_wrap(~ method, scales = "free") +
  labs(x = "Simulation",
       y = "Posterior",
       title = "Not recovered: unique area with additional units",
       color = element_blank()) +
  theme_bw() +
  theme(axis.text.x = element_blank())



plot_p("Firearms")
plot_p("Fixed wing")
plot_p("Helicopter")
plot_p("Snare")
plot_p("Traps")



```


Percent of simulations recovering unique area (zeta):

```{r}
knitr::kable(p_recovered)
```



Across simulations, the $\zeta$ values were accurately estimated, however with helicopters and fixed wing aircraft these posteriors do not deviate from the prior, which is most likely a sample size issue.

The probability of capture is given by

$$logit(\theta)=X\beta$$

where $X$ is a matrix of land cover covariates and $\beta$ a vector of coefficients.

```{r beta}
#| label: fig-beta

w <- 0.7
mH <- method_lookup |> 
  rename(method_idx = idx)
beta1 <- read_csv(file.path(file_dir, "summaryResidual_captureIntercept.csv"))
beta_p <- read_csv(file.path(file_dir, "summaryResidual_captureCovariates.csv")) 

beta <- bind_rows(beta1, beta_p) |> 
  left_join(mH)

beta |> 
  ggplot() +
  aes(y = med, ymin = low, ymax = high, x = position) +
  geom_linerange(position = position_dodge(width = w), linewidth = 2) +
  geom_point(position = position_dodge(width = w), size = 4) +
  geom_hline(aes(yintercept = 0), linetype = "dashed") +
  facet_wrap(~ method, scales = "free") +
  coord_flip() +
  labs(title = "Data model coefficients",
       x = "Position (1 = intercept)",
       y = "Residual error (posterior - truth)") +
  theme_bw()


beta1 <- read_csv(file.path(file_dir, "summaryRecovered_captureIntercept.csv"))
beta_p <- read_csv(file.path(file_dir, "summaryRecovered_captureCovariates.csv")) 

beta <- bind_rows(beta1, beta_p) |> 
  left_join(mH)

beta_recovered <- beta |> 
  group_by(method, position) |> 
  summarise(percent_recovered = sum(parameter_recovered) / n_experiments * 100)

bad_beta <- beta |> 
  filter(parameter_recovered == 0)

bad_beta |> 
  ggplot() +
  aes(y = med, ymin = low, ymax = high, x = simulation, color = "Posterior") +
  geom_linerange() +
  geom_point() +
  geom_point(aes(y = actual, color = "Actual")) +
  facet_grid(position ~ method, scales = "free") +
  labs(x = "Simulation",
       y = "Posterior",
       title = "Not recovered: capture probability parameters",
       color = element_blank()) +
  theme_bw() +
  theme(axis.text.x = element_blank())

```


Percent of simulations recovering capture probability parameters+:

```{r}
knitr::kable(beta_recovered)
```


Across simulations, the $\beta$ values were accurately estimated.

## Abundance estimates and errors

```{r N}
#| label: fig-pred_obs


df <- read_csv(file.path(file_dir, "summaryPropertyAbundance.csv"))

xx = summary(lm(med_abundance ~ abundance, data = df))


df |> 
  ggplot() +
  aes(y = med_abundance, x = abundance) +
  geom_point(size = 0.5) +
  geom_smooth(method = "lm") +
  geom_abline(intercept = 0, slope = 1) +
  labs(title = "Abundance",
       subtitle = paste("Slope =", round(xx$coefficients[2],2), "\nR^2 =", round(xx$r.squared, 2)),
       y = "Posterior median abundance",
       x = "True abundance") +
  theme_bw()

df <- read_csv(file.path(file_dir, "summaryPredictedTake.csv"))

xx = summary(lm(med ~ take, data = df))

df |> 
  ggplot() +
  aes(y = med, x = take) +
  geom_point(size = 0.5) +
  geom_smooth(method = "lm") +
  geom_abline(intercept = 0, slope = 1) +
  labs(title = "Predicted take",
       subtitle = paste("Slope =", round(xx$coefficients[2],2), "\nR^2 =", round(xx$r.squared, 2)),
       y = "Posterior median take",
       x = "True take") +
  theme_bw()

```

In terms of accuracy (posterior median), we tend to under predict as abundance and density increases.

```{r}
#| label: fig-error
#| layout-ncol: 2
#| layout-nrow: 2
#| fig-cap: "How error scales with abundance"
#| fig-subcap: 
#|   - "Mean absolute error"
#|   - "Absolute mean percentage error"
#|   - "Root mean sqaured error"
#|   - "Bias"

xn_error <- read_csv(file.path(file_dir, "PropertyAbundanceMetrics.csv"))

error_plots <- function(df, xcol, ycol){
  df |> 
    ggplot() +
    aes(x = .data[[xcol]], y = .data[[ycol]]) +
    geom_point(size = 0.5) +
    theme_bw()
}

xn_error |> 
  error_plots("abundance", "mae_abundance") +
  geom_smooth() +
  labs(#subtitle = paste("Slope =", round(xx$coefficients[2], 2)),
       y = "Mean absolute error (pig abundance)",
       x = "True abundance")

xn_error |> 
  error_plots("abundance", "mpe_abundance") +
   geom_smooth() +
  labs(#title = "MPE abundance",
       y = "Mean percentage error",
       x = "True abundance")

xn_error |> 
  error_plots("abundance", "rmse_abundance") +
   geom_smooth() +
  labs(#title = "RMSE abundance",
       y = "RMSE",
       x = "True abundance")

xn_error |> 
  error_plots("abundance", "mbias_abundance") +
   geom_smooth() +
  geom_abline(intercept = 0, slope = 0, linetype = "dashed") +
  labs(#title = "Mean bias abundance",
       y = "Bias",
       x = "True abundance")

xn_error |> 
  error_plots("area_property", "rmse_abundance") +
   geom_smooth() +
  geom_abline(intercept = 0, slope = 0, linetype = "dashed") +
  labs(#title = "Mean bias abundance",
       x = "Property area (km^2)",
       y = "RMSE")



```

Not surprisingly, accuracy (mean absolute error) decreases as abundance increases, which is due to posteriors being biased low.

```
bad_prop <- xn_error |>
  ungroup() |> 
  filter(rmse_abundance == max(rmse_abundance)) |> 
  slice(1)

# med_phi <- phi |> 
#   filter(property == bad_prop$property, 
#          simulation == bad_prop$simulation) |> 
#   pull(med)

xn_posterior |> 
  filter(property == bad_prop$property, 
         simulation == bad_prop$simulation) |> 
  ggplot() +
  aes(x = PPNum, y = med_abundance, ymin = low_abundance, ymax = high_abundance) +
  geom_linerange() +
  geom_point() +
  geom_point(aes(y = abundance), shape = 18, color = "red") +
  labs(title = "Property with the largest RMSE",
       y = "Abundance",
       x = "Primary period") +
  theme_bw()
```

```
#| label: fig-sum_take
#| layout-ncol: 2
#| fig-cap: "Effort: pigs removed"
#| fig-subcap: 
#|   - "Bias"
#|   - "Percentage Error"
#|   - "RMSE"

sum_take <- all_take |> 
  group_by(property, PPNum, county, simulation) |> 
  summarise(take = sum(take),
            sum_effort_per = sum(effort_per),
            avg_effort_per = mean(effort_per),
            n_method = length(unique(method))) |> 
  ungroup()


all_methods <- all_methods |> 
  rename(Method = method,
         method = idx)

all_effort <- left_join(all_take, xn_error) |> 
  left_join(all_methods)

effort <- left_join(sum_take, xn_error) 

effort |> 
  ggplot() +
  aes(y = mbias_abundance, x = take, color = survival_prior) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  geom_point(size = 0.75) +
  labs(title = "Bias",
       y = "Median bias",
       x = "Total pigs removed during primary period") +
  theme_bw()

effort |> 
  ggplot() +
  aes(y = mpe_abundance, x = take, color = survival_prior) +
  geom_point(size = 0.75) +
  labs(title = "Percent error",
       y = "Median percent error",
       x = "Total pigs removed during primary period") +
  theme_bw()

effort |> 
  mutate(rmse_abundance = (rmse_abundance)) |> 
  ggplot() +
  aes(y = rmse_abundance, x = take, color = survival_prior) +
  geom_point(size = 0.75) +
  labs(title = "RMSE",
       y = "RMSE",
       x = "Total pigs removed during primary period") +
  theme_bw()


```

```
all_effort |> 
  ggplot() +
  aes(x = trap_count, y = rmse_abundance) +
  geom_point() +
  # geom_smooth(method = "glm") +
  facet_grid(survival_prior ~ Method, scales = "free_x") +
  theme_bw()

```

## Firearms

```
#| label: fig-firearms_bias
#| fig-cap: "Heatmaps for bias when using firearms"
#| layout-ncol: 2
#| layout-nrow: 4
#| fig-subcap: 
#|   - "rho vs effort per"
#|   - "zeta vs effort per"
#|   - "rho vs take"
#|   - "zeta vs take"
#|   - "rho vs units deployed"
#|   - "zeta vs units deployed"
#|   - "take vs effort per"
#|   - "take vs units deployed"
z <- "mbias_abundance"
main <- "Bias using FIREARMS"
rho_lab <- "Search area by firearms per hunt hour"
p_lab <- "Proportion of unique area with additonal firearms"
e_lab <- "Effort per firearm"
t_lab <- "log(Number of pigs removed + 1)"
tc_lab <- "Number of firearms*"
library(lattice)
all_effort_sub <- all_effort
data_f <- filter(all_effort_sub, Method == "FIREARMS", survival_prior == "Uninformative") |> 
  distinct() |> 
  mutate(take = log(take + 1))

heat_map <- function(df, z, x, y, x_lab, y_lab, m){
  levelplot(df[[z]] ~ df[[x]]*df[[y]], 
          data = df,
          xlab = x_lab,
          ylab = y_lab,
          main = m,
          region = TRUE)  
}


heat_map(data_f, z, "rho", "effort_per", rho_lab, e_lab, main)
heat_map(data_f, z, "p_unique", "effort_per", p_lab, e_lab, main)

heat_map(data_f, z, "rho", "take", rho_lab, t_lab, main)
heat_map(data_f, z, "p_unique", "take", p_lab, t_lab, main)

heat_map(data_f, z, "rho", "trap_count", rho_lab, tc_lab, main)
heat_map(data_f, z, "p_unique", "trap_count", p_lab, tc_lab, main)

heat_map(data_f, z, "take", "effort_per", t_lab, e_lab, main)
heat_map(data_f, z, "take", "trap_count", t_lab, tc_lab, main)


```

Most under predictions come from when search area is low

```
#| label: fig-firearms_accuracy
#| fig-cap: "Heatmaps for mean percentage error when using firearms"
#| layout-ncol: 2
#| layout-nrow: 4
#| fig-subcap: 
#|   - "rho vs effort per"
#|   - "zeta vs effort per"
#|   - "rho vs take"
#|   - "zeta vs take"
#|   - "rho vs units deployed"
#|   - "zeta vs units deployed"
#|   - "take vs effort per"
#|   - "take vs units deployed"

z <- "mpe_abundance"
main <- "Accuracy (MPE) using FIREARMS"

heat_map(data_f, z, "rho", "effort_per", rho_lab, e_lab, main)
heat_map(data_f, z, "p_unique", "effort_per", p_lab, e_lab, main)

heat_map(data_f, z, "rho", "take", rho_lab, t_lab, main)
heat_map(data_f, z, "p_unique", "take", p_lab, t_lab, main)

heat_map(data_f, z, "rho", "trap_count", rho_lab, tc_lab, main)
heat_map(data_f, z, "p_unique", "trap_count", p_lab, tc_lab, main)

heat_map(data_f, z, "take", "effort_per", t_lab, e_lab, main)
heat_map(data_f, z, "take", "trap_count", t_lab, tc_lab, main)


```

```
#| label: fig-firearms_uncertainty
#| fig-cap: "Heatmaps for RMSE when using firearms"
#| layout-ncol: 2
#| layout-nrow: 4
#| fig-subcap: 
#|   - "rho vs effort per"
#|   - "zeta vs effort per"
#|   - "rho vs take"
#|   - "zeta vs take"
#|   - "rho vs units deployed"
#|   - "zeta vs units deployed"
#|   - "take vs effort per"
#|   - "take vs units deployed"
#|   
z <- "rmse_abundance"
main <- "Uncertainty (log[RMSE]) using FIREARMS"

heat_map(data_f, z, "rho", "effort_per", rho_lab, e_lab, main)
heat_map(data_f, z, "p_unique", "effort_per", p_lab, e_lab, main)

heat_map(data_f, z, "rho", "take", rho_lab, t_lab, main)
heat_map(data_f, z, "p_unique", "take", p_lab, t_lab, main)

heat_map(data_f, z, "rho", "trap_count", rho_lab, tc_lab, main)
heat_map(data_f, z, "p_unique", "trap_count", p_lab, tc_lab, main)

heat_map(data_f, z, "take", "effort_per", t_lab, e_lab, main)
heat_map(data_f, z, "take", "trap_count", t_lab, tc_lab, main)


```

## Fixed wing

```
#| label: fig-fixeding_bias
#| fig-cap: "Heatmaps for bias when using fixed wing aircraft"
#| layout-ncol: 2
#| layout-nrow: 3
#| fig-subcap: 
#|   - "rho vs effort per"
#|   - "zeta vs effort per"
#|   - "rho vs take"
#|   - "zeta vs take"
#|   - "take vs effort per"

z <- "mbias_abundance"
main <- "Bias using FIXED WING"
rho_lab <- "Search area by fixed wing aircraft per flight hour"
p_lab <- "Proportion of unique area with additonal aircraft"
e_lab <- "Effort per aircraft"

data_f <- filter(all_effort_sub, Method == "FIXED WING") |> 
  distinct() |> 
  mutate(take = log(take + 1))


heat_map(data_f, z, "rho", "effort_per", rho_lab, e_lab, main)
heat_map(data_f, z, "p_unique", "effort_per", p_lab, e_lab, main)

heat_map(data_f, z, "rho", "take", rho_lab, t_lab, main)
heat_map(data_f, z, "p_unique", "take", p_lab, t_lab, main)

heat_map(data_f, z, "take", "effort_per", t_lab, e_lab, main)


```

```
#| label: fig-fixedwing_accuracy
#| fig-cap: "Heatmaps for mean percentage error when using firearms"
#| layout-ncol: 2
#| layout-nrow: 4
#| fig-subcap: 
#|   - "rho vs effort per"
#|   - "zeta vs effort per"
#|   - "rho vs take"
#|   - "zeta vs take"
#|   - "take vs effort per"
z <- "mpe_abundance"
main <- "Accuracy (MPE) using FIXED WING"

heat_map(data_f, z, "rho", "effort_per", rho_lab, e_lab, main)
heat_map(data_f, z, "p_unique", "effort_per", p_lab, e_lab, main)

heat_map(data_f, z, "rho", "take", rho_lab, t_lab, main)
heat_map(data_f, z, "p_unique", "take", p_lab, t_lab, main)

heat_map(data_f, z, "take", "effort_per", t_lab, e_lab, main)


```

```
#| label: fig-fixedwing_uncertainty
#| fig-cap: "Heatmaps for RMSE when using firearms"
#| layout-ncol: 2
#| layout-nrow: 4
#| fig-subcap: 
#|   - "rho vs effort per"
#|   - "zeta vs effort per"
#|   - "rho vs take"
#|   - "zeta vs take"
#|   - "take vs effort per"
z <- "rmse_abundance"
main <- "Uncertainty (log[RMSE]) using FIREARMS"

heat_map(data_f, z, "rho", "effort_per", rho_lab, e_lab, main)
heat_map(data_f, z, "p_unique", "effort_per", p_lab, e_lab, main)

heat_map(data_f, z, "rho", "take", rho_lab, t_lab, main)
heat_map(data_f, z, "p_unique", "take", p_lab, t_lab, main)

heat_map(data_f, z, "take", "effort_per", t_lab, e_lab, main)


```

## Helicopter

```
#| label: fig-helicopter_bias
#| fig-cap: "Heatmaps for bias when using fixed wing aircraft"
#| layout-ncol: 2
#| layout-nrow: 4
#| fig-subcap: 
#|   - "rho vs effort per"
#|   - "zeta vs effort per"
#|   - "rho vs take"
#|   - "zeta vs take"
#|   - "rho vs units deployed"
#|   - "zeta vs units deployed"
#|   - "take vs effort per"
#|   - "take vs units deployed"
z <- "mbias_abundance"
main <- "Bias using HELICOPTER"
rho_lab <- "Search area by helicopters per flight hour"
p_lab <- "Proportion of unique area with additonal helicopters"
e_lab <- "Effort per helicopter"
tc_lab <- "Number of helicopters"

data_f <- filter(all_effort_sub, Method == "HELICOPTER") |> 
  distinct() |> 
  mutate(take = log(take + 1))


heat_map(data_f, z, "rho", "effort_per", rho_lab, e_lab, main)
heat_map(data_f, z, "p_unique", "effort_per", p_lab, e_lab, main)

heat_map(data_f, z, "rho", "take", rho_lab, t_lab, main)
heat_map(data_f, z, "p_unique", "take", p_lab, t_lab, main)

heat_map(data_f, z, "rho", "trap_count", rho_lab, tc_lab, main)
heat_map(data_f, z, "p_unique", "trap_count", p_lab, tc_lab, main)

heat_map(data_f, z, "take", "effort_per", t_lab, e_lab, main)
heat_map(data_f, z, "take", "trap_count", t_lab, tc_lab, main)


```

```
#| label: fig-helicopter_accuracy
#| fig-cap: "Heatmaps for mean percentage error when using firearms"
#| layout-ncol: 2
#| layout-nrow: 4
#| fig-subcap: 
#|   - "rho vs effort per"
#|   - "zeta vs effort per"
#|   - "rho vs take"
#|   - "zeta vs take"
#|   - "rho vs units deployed"
#|   - "zeta vs units deployed"
#|   - "take vs effort per"
#|   - "take vs units deployed"
z <- "mpe_abundance"
main <- "Accuracy (MPE) using HELICOPTER"

heat_map(data_f, z, "rho", "effort_per", rho_lab, e_lab, main)
heat_map(data_f, z, "p_unique", "effort_per", p_lab, e_lab, main)

heat_map(data_f, z, "rho", "take", rho_lab, t_lab, main)
heat_map(data_f, z, "p_unique", "take", p_lab, t_lab, main)

heat_map(data_f, z, "rho", "trap_count", rho_lab, tc_lab, main)
heat_map(data_f, z, "p_unique", "trap_count", p_lab, tc_lab, main)

heat_map(data_f, z, "take", "effort_per", t_lab, e_lab, main)
heat_map(data_f, z, "take", "trap_count", t_lab, tc_lab, main)


```

```
#| label: fig-helicopter_uncertainty
#| fig-cap: "Heatmaps for RMSE when using firearms"
#| layout-ncol: 2
#| layout-nrow: 4
#| fig-subcap: 
#|   - "rho vs effort per"
#|   - "zeta vs effort per"
#|   - "rho vs take"
#|   - "zeta vs take"
#|   - "rho vs units deployed"
#|   - "zeta vs units deployed"
#|   - "take vs effort per"
#|   - "take vs units deployed"
z <- "rmse_abundance"
main <- "Uncertainty (log[RMSE]) using HELICOPTER"

heat_map(data_f, z, "rho", "effort_per", rho_lab, e_lab, main)
heat_map(data_f, z, "p_unique", "effort_per", p_lab, e_lab, main)

heat_map(data_f, z, "rho", "take", rho_lab, t_lab, main)
heat_map(data_f, z, "p_unique", "take", p_lab, t_lab, main)

heat_map(data_f, z, "rho", "trap_count", rho_lab, tc_lab, main)
heat_map(data_f, z, "p_unique", "trap_count", p_lab, tc_lab, main)

heat_map(data_f, z, "take", "effort_per", t_lab, e_lab, main)
heat_map(data_f, z, "take", "trap_count", t_lab, tc_lab, main)


```

## Snares

```
#| label: fig-snare_bias
#| fig-cap: "Heatmaps for bias when using fixed wing aircraft"
#| layout-ncol: 2
#| layout-nrow: 6
#| fig-subcap: 
#|   - "rho vs effort per"
#|   - "zeta vs effort per"
#|   - "gamma vs effort per"
#|   - "rho vs take"
#|   - "zeta vs take"
#|   - "gamma vs take"
#|   - "rho vs units deployed"
#|   - "zeta vs units deployed"
#|   - "gamma vs units deployed"
#|   - "take vs effort per"
#|   - "take vs units deployed"
z <- "mbias_abundance"
main <- "Bias using SNARES"
rho_lab <- "Search area by snares per trap night"
p_lab <- "Proportion of unique area with additonal snares"
e_lab <- "Effort per snare"
tc_lab <- "Number of snares"
g_lab <- "Saturation constant"

data_f <- filter(all_effort_sub, Method == "SNARE") |> 
  distinct() |> 
  mutate(take = log(take + 1))


heat_map(data_f, z, "rho", "effort_per", rho_lab, e_lab, main)
heat_map(data_f, z, "p_unique", "effort_per", p_lab, e_lab, main)
heat_map(data_f, z, "gamma", "effort_per", g_lab, e_lab, main)

heat_map(data_f, z, "rho", "take", rho_lab, t_lab, main)
heat_map(data_f, z, "p_unique", "take", p_lab, t_lab, main)
heat_map(data_f, z, "gamma", "take", g_lab, e_lab, main)

heat_map(data_f, z, "rho", "trap_count", rho_lab, tc_lab, main)
heat_map(data_f, z, "p_unique", "trap_count", p_lab, tc_lab, main)
heat_map(data_f, z, "gamma", "trap_count", g_lab, e_lab, main)

heat_map(data_f, z, "take", "effort_per", t_lab, e_lab, main)
heat_map(data_f, z, "take", "trap_count", t_lab, tc_lab, main)


```

```
#| label: fig-snare_accuracy
#| fig-cap: "Heatmaps for mean percentage error when using firearms"
#| layout-ncol: 2
#| layout-nrow: 6
#| fig-subcap: 
#|   - "rho vs effort per"
#|   - "zeta vs effort per"
#|   - "gamma vs effort per"
#|   - "rho vs take"
#|   - "zeta vs take"
#|   - "gamma vs take"
#|   - "rho vs units deployed"
#|   - "zeta vs units deployed"
#|   - "gamma vs units deployed"
#|   - "take vs effort per"
#|   - "take vs units deployed"
z <- "mpe_abundance"
main <- "Accuracy (MPE) using SNARE"

heat_map(data_f, z, "rho", "effort_per", rho_lab, e_lab, main)
heat_map(data_f, z, "p_unique", "effort_per", p_lab, e_lab, main)
heat_map(data_f, z, "gamma", "effort_per", g_lab, e_lab, main)

heat_map(data_f, z, "rho", "take", rho_lab, t_lab, main)
heat_map(data_f, z, "p_unique", "take", p_lab, t_lab, main)
heat_map(data_f, z, "gamma", "take", g_lab, e_lab, main)

heat_map(data_f, z, "rho", "trap_count", rho_lab, tc_lab, main)
heat_map(data_f, z, "p_unique", "trap_count", p_lab, tc_lab, main)
heat_map(data_f, z, "gamma", "trap_count", g_lab, e_lab, main)

heat_map(data_f, z, "take", "effort_per", t_lab, e_lab, main)
heat_map(data_f, z, "take", "trap_count", t_lab, tc_lab, main)


```

```
#| label: fig-snare_uncertainty
#| fig-cap: "Heatmaps for RMSE when using firearms"
#| layout-ncol: 2
#| layout-nrow: 6
#| fig-subcap: 
#|   - "rho vs effort per"
#|   - "zeta vs effort per"
#|   - "gamma vs effort per"
#|   - "rho vs take"
#|   - "zeta vs take"
#|   - "gamma vs take"
#|   - "rho vs units deployed"
#|   - "zeta vs units deployed"
#|   - "gamma vs units deployed"
#|   - "take vs effort per"
#|   - "take vs units deployed"
z <- "rmse_abundance"
main <- "Uncertainty (log[RMSE]) using SNARE"

heat_map(data_f, z, "rho", "effort_per", rho_lab, e_lab, main)
heat_map(data_f, z, "p_unique", "effort_per", p_lab, e_lab, main)
heat_map(data_f, z, "gamma", "effort_per", g_lab, e_lab, main)

heat_map(data_f, z, "rho", "take", rho_lab, t_lab, main)
heat_map(data_f, z, "p_unique", "take", p_lab, t_lab, main)
heat_map(data_f, z, "gamma", "take", g_lab, e_lab, main)

heat_map(data_f, z, "rho", "trap_count", rho_lab, tc_lab, main)
heat_map(data_f, z, "p_unique", "trap_count", p_lab, tc_lab, main)
heat_map(data_f, z, "gamma", "trap_count", g_lab, e_lab, main)

heat_map(data_f, z, "take", "effort_per", t_lab, e_lab, main)
heat_map(data_f, z, "take", "trap_count", t_lab, tc_lab, main)


```

## Traps

```
#| label: fig-trap_bias
#| fig-cap: "Heatmaps for bias when using fixed wing aircraft"
#| layout-ncol: 2
#| layout-nrow: 6
#| fig-subcap: 
#|   - "rho vs effort per"
#|   - "zeta vs effort per"
#|   - "gamma vs effort per"
#|   - "rho vs take"
#|   - "zeta vs take"
#|   - "gamma vs take"
#|   - "rho vs units deployed"
#|   - "zeta vs units deployed"
#|   - "gamma vs units deployed"
#|   - "take vs effort per"
#|   - "take vs units deployed"
z <- "mbias_abundance"
main <- "Bias using TRAPS"
rho_lab <- "Search area by traps per trap night"
p_lab <- "Proportion of unique area with additonal traps"
e_lab <- "Effort per trap"
tc_lab <- "Number of traps"
g_lab <- "Saturation constant"

data_f <- filter(all_effort_sub, Method == "TRAPS") |> 
  distinct() |> 
  mutate(take = log(take + 1))


heat_map(data_f, z, "rho", "effort_per", rho_lab, e_lab, main)
heat_map(data_f, z, "p_unique", "effort_per", p_lab, e_lab, main)
heat_map(data_f, z, "gamma", "effort_per", g_lab, e_lab, main)

heat_map(data_f, z, "rho", "take", rho_lab, t_lab, main)
heat_map(data_f, z, "p_unique", "take", p_lab, t_lab, main)
heat_map(data_f, z, "gamma", "take", g_lab, e_lab, main)

heat_map(data_f, z, "rho", "trap_count", rho_lab, tc_lab, main)
heat_map(data_f, z, "p_unique", "trap_count", p_lab, tc_lab, main)
heat_map(data_f, z, "gamma", "trap_count", g_lab, e_lab, main)

heat_map(data_f, z, "take", "effort_per", t_lab, e_lab, main)
heat_map(data_f, z, "take", "trap_count", t_lab, tc_lab, main)


```

```
#| label: fig-trap_accuracy
#| fig-cap: "Heatmaps for mean percentage error when using firearms"
#| layout-ncol: 2
#| layout-nrow: 6
#| fig-subcap: 
#|   - "rho vs effort per"
#|   - "zeta vs effort per"
#|   - "gamma vs effort per"
#|   - "rho vs take"
#|   - "zeta vs take"
#|   - "gamma vs take"
#|   - "rho vs units deployed"
#|   - "zeta vs units deployed"
#|   - "gamma vs units deployed"
#|   - "take vs effort per"
#|   - "take vs units deployed"
z <- "mpe_abundance"
main <- "Accuracy (MPE) using TRAPS"

heat_map(data_f, z, "rho", "effort_per", rho_lab, e_lab, main)
heat_map(data_f, z, "p_unique", "effort_per", p_lab, e_lab, main)
heat_map(data_f, z, "gamma", "effort_per", g_lab, e_lab, main)

heat_map(data_f, z, "rho", "take", rho_lab, t_lab, main)
heat_map(data_f, z, "p_unique", "take", p_lab, t_lab, main)
heat_map(data_f, z, "gamma", "take", g_lab, e_lab, main)

heat_map(data_f, z, "rho", "trap_count", rho_lab, tc_lab, main)
heat_map(data_f, z, "p_unique", "trap_count", p_lab, tc_lab, main)
heat_map(data_f, z, "gamma", "trap_count", g_lab, e_lab, main)

heat_map(data_f, z, "take", "effort_per", t_lab, e_lab, main)
heat_map(data_f, z, "take", "trap_count", t_lab, tc_lab, main)


```

```
#| label: fig-trap_uncertainty
#| fig-cap: "Heatmaps for RMSE when using firearms"
#| layout-ncol: 2
#| layout-nrow: 6
#| fig-subcap: 
#|   - "rho vs effort per"
#|   - "zeta vs effort per"
#|   - "gamma vs effort per"
#|   - "rho vs take"
#|   - "zeta vs take"
#|   - "gamma vs take"
#|   - "rho vs units deployed"
#|   - "zeta vs units deployed"
#|   - "gamma vs units deployed"
#|   - "take vs effort per"
#|   - "take vs units deployed"
z <- "rmse_abundance"
main <- "Uncertainty (log[RMSE]) using TRAPS"

heat_map(data_f, z, "rho", "effort_per", rho_lab, e_lab, main)
heat_map(data_f, z, "p_unique", "effort_per", p_lab, e_lab, main)
heat_map(data_f, z, "gamma", "effort_per", g_lab, e_lab, main)

heat_map(data_f, z, "rho", "take", rho_lab, t_lab, main)
heat_map(data_f, z, "p_unique", "take", p_lab, t_lab, main)
heat_map(data_f, z, "gamma", "take", g_lab, e_lab, main)

heat_map(data_f, z, "rho", "trap_count", rho_lab, tc_lab, main)
heat_map(data_f, z, "p_unique", "trap_count", p_lab, tc_lab, main)
heat_map(data_f, z, "gamma", "trap_count", g_lab, e_lab, main)

heat_map(data_f, z, "take", "effort_per", t_lab, e_lab, main)
heat_map(data_f, z, "take", "trap_count", t_lab, tc_lab, main)


```
